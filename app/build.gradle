apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        applicationId "com.light.weather"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode VERSION_CODE.toInteger()
        versionName VERSION_NAME
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "HEWEATHER_KEY", HEWEATHER_KEY
        buildConfigField "String", "HEWEATHER_URL", HEWEATHER_FREE_URL
        buildConfigField "String", "APP_ID", APP_ID
        manifestPlaceholders = [amap_key: AMAP_KEY]
    }
    def filePrivateProperties = file("../jks/public.properties")
    if (filePrivateProperties.exists()) {
        signingConfigs {
            release {
                Properties propsPrivate = new Properties()
                propsPrivate.load(new FileInputStream(filePrivateProperties))

                storeFile file(propsPrivate['key.store'])
                keyAlias propsPrivate['key.alias']
                storePassword propsPrivate['key.store.password']
                keyPassword propsPrivate['key.alias.password']
            }
        }
    }

    applicationVariants.all { variant ->//获取 variant 参数，就是 productFlavor x buildType
        variant.outputs.all {
            if (outputFileName.endsWith('-release.apk')) {//变种名以release.apk结尾时才修改名字
                outputFileName = outputFileName.replace(outputFileName, "LightWeather" + "_" + variant.versionName + ".apk")
            } else if (outputFileName.endsWith('-debug.apk')) {
                outputFileName = outputFileName.replace(outputFileName, "LightWeather-debug" + "_" + variant.versionName + ".apk")
            }
        }
    }

    buildTypes {
        debug {
            // 显示Log
            buildConfigField "boolean", "LOG_DEBUG", "true"
            if (filePrivateProperties.exists()) {
                signingConfig signingConfigs.release
            }
        }
        release {
            // 不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "true"
            if (filePrivateProperties.exists()) {
                signingConfig signingConfigs.release
            }
            shrinkResources false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

    }

    lintOptions {
        abortOnError false
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation "junit:junit:$rootProject.junitVersion"
    androidTestImplementation "com.android.support.test:runner:$rootProject.runnerVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$rootProject.espressoVersion"

    implementation "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
    implementation "com.android.support:design:$rootProject.supportLibraryVersion"
    //butterknife
    implementation "com.jakewharton:butterknife:$rootProject.butterknifeVersion"
    annotationProcessor "com.jakewharton:butterknife-compiler:$rootProject.butterknifeVersion"

    //rxjava
    implementation "io.reactivex.rxjava2:rxjava:$rootProject.rxjavaVersion"
    //rxandroid
    implementation "io.reactivex.rxjava2:rxandroid:$rootProject.rxandroidVersion"

    //retrofit
    implementation "com.squareup.retrofit2:retrofit:$rootProject.retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$rootProject.retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$rootProject.retrofitVersion"

    // Dagger dependencies
    implementation "com.google.dagger:dagger:$rootProject.daggerVersion"
    annotationProcessor "com.google.dagger:dagger-compiler:$rootProject.daggerVersion"

    implementation "com.google.dagger:dagger-android:$rootProject.daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$rootProject.daggerVersion"
    // if you use the support libraries
    annotationProcessor "com.google.dagger:dagger-android-processor:$rootProject.daggerVersion"

    //leakcanary
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$rootProject.leakcanaryVersion"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$rootProject.leakcanaryVersion"
    testImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$rootProject.leakcanaryVersion"

    //sqliteonweb
    debugImplementation "io.github.skyhacker2:sqliteonweb:$rootProject.sqliteonweb"
    releaseImplementation "io.github.skyhacker2:sqliteonweb-no-op:$rootProject.sqliteonweb"

    //高德定位
    implementation 'com.amap.api:location:latest.integration'

    //rxbinding
    implementation "com.jakewharton.rxbinding2:rxbinding:$rootProject.rxbinding"
    implementation "com.jakewharton.rxbinding2:rxbinding-appcompat-v7:$rootProject.rxbinding"

    //rxpermissions
    implementation "com.github.tbruyelle:rxpermissions:$rootProject.rxpermissionsVersion"

    implementation "com.github.CymChad:BaseRecyclerViewAdapterHelper:$rootProject.adapterHelperVersion"

    // ViewModel and LiveData
    implementation "android.arch.lifecycle:extensions:$rootProject.arch"
    // alternatively, just ViewModel
    //implementation "android.arch.lifecycle:viewmodel:$rootProject.arch"
    // alternatively, just LiveData
    //implementation "android.arch.lifecycle:livedata:$rootProject.arch"

    // Room
    implementation "android.arch.persistence.room:runtime:$rootProject.arch"
    annotationProcessor "android.arch.persistence.room:compiler:$rootProject.arch"
    // RxJava support for Room
    //implementation "android.arch.persistence.room:rxjava2:$rootProject.arch"

    implementation 'com.tencent.bugly:crashreport:latest.release'
    //其中latest.release指代最新Bugly SDK版本号，也可以指定明确的版本号，例如2.2.0
    implementation "com.github.anzaizai:EasySwipeMenuLayout:$rootProject.EasySwipeMenuLayout"

    //retrofit-url-manager
    implementation 'me.jessyan:retrofit-url-manager:1.4.0'
}
